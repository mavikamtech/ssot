name: Deploy GraphQL API to AWS Fargate

on:
  push:
    branches: [ "main" ]
    paths:
      - "gql/**"
      - "pkg/**"
      - "go.mod"
      - "go.sum"
      - "Dockerfile"
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ssot-gql
  ECS_SERVICE: ssot-gql-service
  ECS_CLUSTER: arn:aws:ecs:us-east-1:167067248318:cluster/ssot-cluster
  TASK_FAMILY: ssot-gql-task
  CONTAINER_NAME: ssot-gql

jobs:
  deploy:
    name: Deploy to Fargate
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::167067248318:role/GithubActionServiceRole
        role-session-name: gh-oidc-fargate-deploy
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR so that it can be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Get existing task definition
      id: get-task-def
      run: |
        # Get the current task definition
        TASK_DEF_ARN=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query 'services[0].taskDefinition' --output text 2>/dev/null || echo "")
        
        if [ "$TASK_DEF_ARN" = "" ] || [ "$TASK_DEF_ARN" = "None" ]; then
          echo "‚ùå Error: No existing service or task definition found!"
          echo "The deployment requires an existing ECS service and task definition."
          echo "Please ensure the service '${{ env.ECS_SERVICE }}' exists in cluster '${{ env.ECS_CLUSTER }}'."
          exit 1
        else
          echo "Using existing task definition: $TASK_DEF_ARN"
          aws ecs describe-task-definition --task-definition $TASK_DEF_ARN --query 'taskDefinition' > task-definition.json
          
          # Get existing network configuration from service
          EXISTING_CONFIG=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query 'services[0].networkConfiguration.awsvpcConfiguration' --output json 2>/dev/null || echo "{}")
          SUBNET_IDS=$(echo $EXISTING_CONFIG | jq -r '.subnets[]' 2>/dev/null | tr '\n' ',' | head -c -1 || echo "")
          DEFAULT_SG=$(echo $EXISTING_CONFIG | jq -r '.securityGroups[0]' 2>/dev/null || echo "")
          
          echo "subnet-ids=$SUBNET_IDS" >> $GITHUB_OUTPUT
          echo "security-group=$DEFAULT_SG" >> $GITHUB_OUTPUT
          
          # Remove read-only fields
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' task-definition.json > temp.json && mv temp.json task-definition.json
          
          # Update the image
          jq --arg image "${{ steps.build-image.outputs.image }}" '.containerDefinitions[0].image = $image' task-definition.json > temp.json && mv temp.json task-definition.json
        fi

    - name: Create CloudWatch log group if not exists
      run: |
        aws logs create-log-group --log-group-name "/ecs/${{ env.TASK_FAMILY }}" --region ${{ env.AWS_REGION }} || true

    - name: Register new task definition
      id: register-task-def
      run: |
        TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
        echo "task-definition-arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

    - name: Update ECS service
      run: |
        # Check if service exists
        SERVICE_EXISTS=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query 'services[?status==`ACTIVE`]' --output text 2>/dev/null || echo "")
        
        if [ "$SERVICE_EXISTS" = "" ]; then
          echo "‚ùå Error: ECS service '${{ env.ECS_SERVICE }}' not found or not active!"
          echo "The deployment requires an existing active ECS service."
          echo "Please ensure the service exists in cluster '${{ env.ECS_CLUSTER }}'."
          exit 1
        else
          echo "Updating existing ECS service..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ steps.register-task-def.outputs.task-definition-arn }}
        fi

    - name: Wait for service stability
      run: |
        echo "Waiting for service to reach steady state..."
        aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }}

    - name: Get service URL
      run: |
        # Get the service details
        SERVICE_INFO=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query 'services[0]' --output json 2>/dev/null || echo "{}")
        
        # Check if service has load balancer
        LOAD_BALANCER_ARN=$(echo $SERVICE_INFO | jq -r '.loadBalancers[0].targetGroupArn // empty' 2>/dev/null || echo "")
        
        if [ "$LOAD_BALANCER_ARN" != "" ] && [ "$LOAD_BALANCER_ARN" != "null" ]; then
          LB_ARN=$(aws elbv2 describe-target-groups --target-group-arns $LOAD_BALANCER_ARN --query 'TargetGroups[0].LoadBalancerArns[0]' --output text 2>/dev/null || echo "")
          if [ "$LB_ARN" != "" ] && [ "$LB_ARN" != "None" ]; then
            LB_DNS=$(aws elbv2 describe-load-balancers --load-balancer-arns $LB_ARN --query 'LoadBalancers[0].DNSName' --output text 2>/dev/null || echo "")
            if [ "$LB_DNS" != "" ]; then
              echo "üöÄ Service deployed successfully!"
              echo "üìç GraphQL Playground: http://$LB_DNS"
              echo "üìç GraphQL API: http://$LB_DNS/query"
              echo "üìç Health Check: http://$LB_DNS/health"
            fi
          fi
        fi
        
        # Get task public IP if no load balancer
        TASK_ARN=$(aws ecs list-tasks --cluster ${{ env.ECS_CLUSTER }} --service-name ${{ env.ECS_SERVICE }} --query 'taskArns[0]' --output text 2>/dev/null || echo "")
        if [ "$TASK_ARN" != "" ] && [ "$TASK_ARN" != "None" ]; then
          PUBLIC_IP=$(aws ecs describe-tasks --cluster ${{ env.ECS_CLUSTER }} --tasks $TASK_ARN --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text 2>/dev/null || echo "")
          if [ "$PUBLIC_IP" != "" ]; then
            ENI_ID=$PUBLIC_IP
            PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI_ID --query 'NetworkInterfaces[0].Association.PublicIp' --output text 2>/dev/null || echo "")
            if [ "$PUBLIC_IP" != "" ] && [ "$PUBLIC_IP" != "None" ]; then
              echo "‚úÖ Service deployed successfully!"
              echo "üìç Direct Access: http://$PUBLIC_IP:8080"
              echo "üìç GraphQL Playground: http://$PUBLIC_IP:8080"
              echo "üìç GraphQL API: http://$PUBLIC_IP:8080/query"
              echo "üìç Health Check: http://$PUBLIC_IP:8080/health"
            fi
          fi
        fi
        
        if [ "$LB_DNS" = "" ] && [ "$PUBLIC_IP" = "" ]; then
          echo "‚úÖ Service deployed successfully!"
          echo "‚ÑπÔ∏è  Service is running on Fargate. Check AWS Console for details."
        fi
