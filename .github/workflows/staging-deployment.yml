name: Deploy GQL API to AWS Fargate (Staging)

on:
  push:
    branches: [ "staging" ]
    paths:
      - "gql/**"
      - "pkg/**"
      - "go.mod"
      - "go.sum"
      - "Dockerfile"
      - ".github/workflows/staging-deployment.yml"
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ssot-gql-staging
  ECS_SERVICE: arn:aws:ecs:us-east-1:167067248318:service/ssot-cluster/ssot-gql-task-service-staging
  ECS_CLUSTER: arn:aws:ecs:us-east-1:167067248318:cluster/ssot-cluster
  TASK_FAMILY: ssot-gql-task-staging
  CONTAINER_NAME: ssot-gql

jobs:
  deploy:
    name: Deploy to Fargate (Staging)
    runs-on: ubuntu-latest
    environment: staging
    
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::167067248318:role/GithubActionServiceRole
        role-session-name: gh-oidc-fargate-deploy
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR so that it can be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Get existing task definition
      id: get-task-def
      run: |
        # Debug: Check AWS credentials and permissions
        echo "üîç Checking AWS credentials..."
        aws sts get-caller-identity
        
        # Debug: Check if cluster exists
        echo "üîç Checking if cluster exists..."
        aws ecs describe-clusters --clusters ${{ env.ECS_CLUSTER }} --query 'clusters[0].clusterName' --output text || {
          echo "‚ùå Error: Cannot access cluster or cluster doesn't exist"
          exit 1
        }
        
        # Debug: Check if service exists with detailed error output
        echo "üîç Checking if service exists..."
        SERVICE_INFO=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} 2>&1) || {
          echo "‚ùå Error: Failed to describe service"
          echo "Error details: $SERVICE_INFO"
          exit 1
        }
        
        echo "Service info retrieved successfully"
        
        # Get the current task definition
        echo "üîç Getting task definition from service..."
        TASK_DEF_ARN=$(echo "$SERVICE_INFO" | jq -r '.services[0].taskDefinition // empty')
        
        echo "Task definition ARN: $TASK_DEF_ARN"
        
        # Check if we got a valid task definition ARN
        if [ "$TASK_DEF_ARN" = "" ] || [ "$TASK_DEF_ARN" = "None" ] || [ "$TASK_DEF_ARN" = "null" ]; then
          echo "‚ùå Error: No existing service or task definition found!"
          echo "Service response: $SERVICE_INFO"
          exit 1
        fi
        
        echo "‚úÖ Found task definition: $TASK_DEF_ARN"
        
        # Get the task definition details
        echo "üîç Fetching task definition details..."
        aws ecs describe-task-definition --task-definition "$TASK_DEF_ARN" --query 'taskDefinition' > task-definition.json || {
          echo "‚ùå Error: Failed to describe task definition"
          exit 1
        }
        
        # Verify the task definition file was created and has content
        if [ ! -s task-definition.json ]; then
          echo "‚ùå Error: Task definition file is empty!"
          cat task-definition.json
          exit 1
        fi
        
        echo "‚úÖ Task definition retrieved successfully"
        
        # Get existing network configuration from service
        echo "üîç Getting network configuration..."
        EXISTING_CONFIG=$(echo "$SERVICE_INFO" | jq -r '.services[0].networkConfiguration.awsvpcConfiguration // null')
        
        if [ "$EXISTING_CONFIG" != "null" ] && [ "$EXISTING_CONFIG" != "" ]; then
          SUBNET_IDS=$(echo "$EXISTING_CONFIG" | jq -r '.subnets[]' 2>/dev/null | tr '\n' ',' | sed 's/,$//')
          DEFAULT_SG=$(echo "$EXISTING_CONFIG" | jq -r '.securityGroups[0]' 2>/dev/null)
          
          echo "Subnets: $SUBNET_IDS"
          echo "Security Group: $DEFAULT_SG"
          
          echo "subnet-ids=$SUBNET_IDS" >> $GITHUB_OUTPUT
          echo "security-group=$DEFAULT_SG" >> $GITHUB_OUTPUT
        fi
        
        # Remove read-only fields
        echo "üîç Processing task definition..."
        jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' task-definition.json > temp.json && mv temp.json task-definition.json
        
        # Update the image
        jq --arg image "${{ steps.build-image.outputs.image }}" '.containerDefinitions[0].image = $image' task-definition.json > temp.json && mv temp.json task-definition.json
        
        # Add or update environment variables
        jq '.containerDefinitions[0].environment = (.containerDefinitions[0].environment // []) + [{"name": "ENV", "value": "staging"}]' task-definition.json > temp.json && mv temp.json task-definition.json
        
        echo "‚úÖ Task definition processed successfully"

    - name: Register new task definition
      id: register-task-def
      run: |
        TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
        echo "task-definition-arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

    - name: Update ECS service
      run: |
        if [ "$RUNNER_DEBUG" = "1" ]; then
          echo "::debug::Updating ECS service with new task definition..."
        fi
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --task-definition ${{ steps.register-task-def.outputs.task-definition-arn }}

    - name: Wait for service stability
      run: |
        if [ "$RUNNER_DEBUG" = "1" ]; then
          echo "::debug::Waiting for service to reach steady state..."
        fi
        aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }}

    - name: Get service URL
      run: |
        # Get the service details
        SERVICE_INFO=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query 'services[0]' --output json 2>/dev/null || echo "{}")
        
        # Check if service has load balancer
        LOAD_BALANCER_ARN=$(echo $SERVICE_INFO | jq -r '.loadBalancers[0].targetGroupArn // empty' 2>/dev/null || echo "")
        
        if [ "$LOAD_BALANCER_ARN" != "" ] && [ "$LOAD_BALANCER_ARN" != "null" ]; then
          LB_ARN=$(aws elbv2 describe-target-groups --target-group-arns $LOAD_BALANCER_ARN --query 'TargetGroups[0].LoadBalancerArns[0]' --output text 2>/dev/null || echo "")
          if [ "$LB_ARN" != "" ] && [ "$LB_ARN" != "None" ]; then
            LB_DNS=$(aws elbv2 describe-load-balancers --load-balancer-arns $LB_ARN --query 'LoadBalancers[0].DNSName' --output text 2>/dev/null || echo "")
            if [ "$LB_DNS" != "" ]; then
              echo "üöÄ Staging service deployed successfully!"
              echo "üìç GraphQL Playground: http://$LB_DNS"
              echo "üìç GraphQL API: http://$LB_DNS/query"
              echo "üìç Health Check: http://$LB_DNS/health"
            fi
          fi
        fi
        
        # Get task public IP if no load balancer
        TASK_ARN=$(aws ecs list-tasks --cluster ${{ env.ECS_CLUSTER }} --service-name ${{ env.ECS_SERVICE }} --query 'taskArns[0]' --output text 2>/dev/null || echo "")
        if [ "$TASK_ARN" != "" ] && [ "$TASK_ARN" != "None" ]; then
          PUBLIC_IP=$(aws ecs describe-tasks --cluster ${{ env.ECS_CLUSTER }} --tasks $TASK_ARN --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text 2>/dev/null || echo "")
          if [ "$PUBLIC_IP" != "" ]; then
            ENI_ID=$PUBLIC_IP
            PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI_ID --query 'NetworkInterfaces[0].Association.PublicIp' --output text 2>/dev/null || echo "")
            if [ "$PUBLIC_IP" != "" ] && [ "$PUBLIC_IP" != "None" ]; then
              echo "‚úÖ Staging service deployed successfully!"
              echo "üìç Direct Access: http://$PUBLIC_IP:8080"
              echo "üìç GraphQL Playground: http://$PUBLIC_IP:8080"
              echo "üìç GraphQL API: http://$PUBLIC_IP:8080/query"
              echo "üìç Health Check: http://$PUBLIC_IP:8080/health"
            fi
          fi
        fi
        
        if [ "$LB_DNS" = "" ] && [ "$PUBLIC_IP" = "" ]; then
          echo "‚úÖ Staging service deployed successfully!"
          echo "‚ÑπÔ∏è  Service is running on Fargate. Check AWS Console for details."
        fi
