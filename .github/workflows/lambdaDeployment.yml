name: Build and Deploy all lambdas in Parallel (Serverless + Go)

on:
  push:
    branches: [ "main" ]
    paths:
      - "sls/golang/**"
      - "go.mod"
      - "go.sum"
  workflow_dispatch:

jobs:
  discover:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set-matrix.outputs.services }}
    steps:
      - uses: actions/checkout@v4

      - id: set-matrix
        run: |
          cd sls/golang
          dirs=$(find . -maxdepth 1 -type d ! -name ".*" ! -name "bin" \
                 -exec test -f "{}/serverless.yml" \; -print | sed 's|^\./||')
          echo "Found services: $dirs"
          json=$(printf '%s\n' $dirs | jq -R . | jq -s .)
          echo "services=$json" >> $GITHUB_OUTPUT

  deploy:
    needs: discover
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 20       
      matrix:
        service: ${{ fromJson(needs.discover.outputs.services) }}

    permissions:
      id-token: write
      contents: read

    env:
      AWS_REGION: us-east-1
      STAGE: dev
      SLS_TELEMETRY_DISABLED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::167067248318:role/GithubActionServiceRole
          role-session-name: gh-oidc-poc-etl-api
          aws-region: ${{ env.AWS_REGION }}

      - name: Build & Deploy ${{ matrix.service }}
        working-directory: sls/golang
        run: |
          svc="${{ matrix.service }}"
          echo "ðŸš€ Building $svc"
          mkdir -p bin
          GOOS=linux GOARCH=arm64 CGO_ENABLED=0 \
            go build -tags lambda.norpc -o bin/bootstrap "./$svc"
          (cd bin && zip -q "$svc.zip" bootstrap && rm -f bootstrap)

          echo "ðŸ“¦ Deploying $svc with artifact ../bin/$svc.zip"
          (cd "$svc" && npx --yes serverless@3 deploy --stage $STAGE --region $AWS_REGION)
