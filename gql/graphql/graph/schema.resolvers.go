package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.80

import (
	"context"
	"log"
	"ssot/gql/graphql/graph/model"
	"ssot/gql/graphql/graph/services"
	"ssot/gql/graphql/internal/auth/middleware"
)

// ByLoanCode is the resolver for the byLoanCode field.
func (r *loanCashFlowsResolver) ByLoanCode(ctx context.Context, obj *model.LoanCashFlows, loanCode []*string, endDate *string) ([]*model.LoanCashFlow, error) {
	// Check authentication
	_, err := middleware.GetUserFromContext(ctx)
	if err != nil {
		return nil, err
	}

	// Get column-level permissions using flexible ACL check (either ACL or scope check passes)
	// This determines which columns the user can access
	columnPermissions, err := r.ServiceManager.ACLMiddleware.GetColumnPermissionsFlexible(
		ctx, "LoanCashFlow", "ssot:gql:loancashflow:read", services.AllLoanCashFlowColumns)
	if err != nil {
		return nil, err
	}

	// Get field filters for array-level filtering
	fieldFilters, err := r.ServiceManager.ACLMiddleware.GetFieldFilters(ctx)
	if err != nil {
		// If field filters fail, continue with column-only filtering
		log.Printf("Warning: failed to get field filters: %v\n", err)
		return r.ServiceManager.LoanCashFlowService.GetByLoanCodesWithEndDate(ctx, loanCode, endDate, columnPermissions)
	}

	// Use the enhanced service method with field filtering and end date
	return r.ServiceManager.LoanCashFlowService.GetByLoanCodesWithEndDateAndFieldFilters(ctx, loanCode, endDate, columnPermissions, fieldFilters)
}

// AddUserACL is the resolver for the addUserACL field.
func (r *mutationResolver) AddUserACL(ctx context.Context, input model.AddUserACLInput) (*model.ACLMutationResult, error) {
	return r.ACLMutations.AddUserACL(ctx, input)
}

// UpdateUserACL is the resolver for the updateUserACL field.
func (r *mutationResolver) UpdateUserACL(ctx context.Context, input model.UpdateUserACLInput) (*model.ACLMutationResult, error) {
	return r.ACLMutations.UpdateUserACL(ctx, input)
}

// AddGroupACL is the resolver for the addGroupACL field.
func (r *mutationResolver) AddGroupACL(ctx context.Context, input model.AddGroupACLInput) (*model.ACLMutationResult, error) {
	return r.ACLMutations.AddGroupACL(ctx, input)
}

// UpdateGroupACL is the resolver for the updateGroupACL field.
func (r *mutationResolver) UpdateGroupACL(ctx context.Context, input model.UpdateGroupACLInput) (*model.ACLMutationResult, error) {
	return r.ACLMutations.UpdateGroupACL(ctx, input)
}

// DeleteUserACL is the resolver for the deleteUserACL field.
func (r *mutationResolver) DeleteUserACL(ctx context.Context, email string) (*model.ACLMutationResult, error) {
	return r.ACLMutations.DeleteUserACL(ctx, email)
}

// DeleteGroupACL is the resolver for the deleteGroupACL field.
func (r *mutationResolver) DeleteGroupACL(ctx context.Context, groupName string) (*model.ACLMutationResult, error) {
	return r.ACLMutations.DeleteGroupACL(ctx, groupName)
}

// LoanCashFlow is the resolver for the loanCashFlow field.
func (r *queryResolver) LoanCashFlow(ctx context.Context) (*model.LoanCashFlows, error) {
	// Check authentication
	_, err := middleware.GetUserFromContext(ctx)
	if err != nil {
		return nil, err
	}

	return &model.LoanCashFlows{}, nil
}

// SsotReportsAdministratorConfiguration is the resolver for the ssotReportsAdministratorConfiguration field.
func (r *queryResolver) SsotReportsAdministratorConfiguration(ctx context.Context) (*model.SsotReportsAdministratorConfiguration, error) {
	return r.ACLQueries.SsotReportsAdministratorConfiguration(ctx)
}

// LoanCashFlows returns LoanCashFlowsResolver implementation.
func (r *Resolver) LoanCashFlows() LoanCashFlowsResolver { return &loanCashFlowsResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type loanCashFlowsResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
